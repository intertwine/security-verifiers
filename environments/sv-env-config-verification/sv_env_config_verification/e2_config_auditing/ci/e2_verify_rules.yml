name: e2-verify

on: [push, pull_request]

env:
  OPA_VERSION: 1.8.0
  KUBELINTER_VERSION: 0.7.6
  SEMGREP_VERSION: 1.137.0

jobs:
  validate-tools:
    name: Validate Tool Versions
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Check tool versions match pinned versions
        run: |
          source ci/versions.txt
          echo "Expected OPA version: $OPA_VERSION"
          echo "Expected Kubelinter version: $KUBELINTER_VERSION"
          echo "Expected Semgrep version: $SEMGREP_VERSION"

          # Validate versions are not 0.0.0
          if [ "$OPA_VERSION" = "0.0.0" ]; then
            echo "ERROR: OPA version not pinned"
            exit 1
          fi
          if [ "$KUBELINTER_VERSION" = "0.0.0" ]; then
            echo "ERROR: Kubelinter version not pinned"
            exit 1
          fi
          if [ "$SEMGREP_VERSION" = "0.0.0" ]; then
            echo "ERROR: Semgrep version not pinned"
            exit 1
          fi

  test-and-validate:
    name: Test and Golden File Validation
    runs-on: ubuntu-latest
    needs: validate-tools
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install uv
        run: pip install uv

      - name: Install dependencies
        run: uv sync

      - name: Install OPA
        run: |
          source ci/versions.txt
          curl -L -o opa https://github.com/open-policy-agent/opa/releases/download/v${OPA_VERSION}/opa_linux_amd64
          chmod +x opa
          sudo mv opa /usr/local/bin/

      - name: Install Kubelinter
        run: |
          source ci/versions.txt
          curl -L -o kube-linter.tar.gz https://github.com/stackrox/kube-linter/releases/download/v${KUBELINTER_VERSION}/kube-linter-linux.tar.gz
          tar -xzf kube-linter.tar.gz
          sudo mv kube-linter /usr/local/bin/

      - name: Install Semgrep
        run: |
          source ci/versions.txt
          pip install semgrep==${SEMGREP_VERSION}

      - name: Validate OPA policies
        run: |
          cd policies
          opa check *.rego
          echo "OPA policies validated successfully"

      - name: Run unit tests
        run: uv run pytest tests/ -v

      - name: Generate oracle files
        run: |
          uv run python -c "
          from sv_env_config_verification.e2_config_auditing.oracle import build_oracle_for_k8s, build_oracle_for_tf
          import json
          import os

          # Generate oracle for Kubernetes fixture
          k8s_oracle = build_oracle_for_k8s(['dataset/fixtures/k8s/bad_pod.yaml'])
          with open('dataset/oracle/bad_pod_new.json', 'w') as f:
            json.dump(k8s_oracle, f, indent=2)

          # Generate oracle for Terraform fixture
          tf_oracle = build_oracle_for_tf(['dataset/fixtures/tf/bad_tf.json'])
          with open('dataset/oracle/bad_tf_new.json', 'w') as f:
            json.dump(tf_oracle, f, indent=2)
          "

      - name: Compare oracle files
        run: |
          echo "Comparing generated oracle files with golden files..."

          # Compare Kubernetes oracle
          if ! diff -u dataset/oracle/bad_pod.json dataset/oracle/bad_pod_new.json; then
            echo "ERROR: Kubernetes oracle file differs from golden file"
            echo "Generated oracle:"
            cat dataset/oracle/bad_pod_new.json
            exit 1
          fi

          # Compare Terraform oracle
          if ! diff -u dataset/oracle/bad_tf.json dataset/oracle/bad_tf_new.json; then
            echo "ERROR: Terraform oracle file differs from golden file"
            echo "Generated oracle:"
            cat dataset/oracle/bad_tf_new.json
            exit 1
          fi

          echo "âœ… All oracle files match golden files"

      - name: Run integration tests
        run: uv run pytest tests/ -v --tb=short

      - name: Clean up generated files
        run: rm -f dataset/oracle/bad_*_new.json
