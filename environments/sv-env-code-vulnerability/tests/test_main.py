"""Tests for the code vulnerability environment."""

import verifiers as vf
from sv_env_code_vulnerability.main import (
    CodeVulnerabilityParser,
    load_environment,
    reward_vulnerability_detection,
    scan_c_code,
    scan_python_code,
)


class TestCodeVulnerabilityParser:
    """Test cases for CodeVulnerabilityParser class."""

    def test_parse_answer_vulnerable(self):
        """Test parsing vulnerable responses."""
        parser = CodeVulnerabilityParser()
        assert parser.parse_answer("Vulnerable") == "Vulnerable"
        assert parser.parse_answer("Code has vulnerability") == "Vulnerable"
        assert parser.parse_answer("Security vulnerability detected") == "Vulnerable"

    def test_parse_answer_secure(self):
        """Test parsing secure responses."""
        parser = CodeVulnerabilityParser()
        assert parser.parse_answer("Secure") == "Secure"
        assert parser.parse_answer("Code is secure") == "Secure"

    def test_parse_answer_fixed(self):
        """Test parsing fixed responses."""
        parser = CodeVulnerabilityParser()
        assert parser.parse_answer("Fixed") == "Fixed"
        assert parser.parse_answer("Vulnerability has been fixed") == "Fixed"

    def test_format_reward(self):
        """Test format reward function."""
        parser = CodeVulnerabilityParser()
        format_func = parser.get_format_reward_func()

        # Perfect format
        assert format_func("Vulnerable: buffer overflow. Fix: use strncpy instead") == 1.0

        # Partial format
        assert format_func("This code is vulnerable") == 0.5

        # Poor format
        assert format_func("I don't know") == 0.0


def test_scan_python_code_vulnerable():
    """Test Python code scanner with vulnerable code."""
    code = """
    def process_user_input(data):
        result = eval(data)
        exec(data)
        os.system("rm -rf " + data)
    """

    result = scan_python_code(code)

    assert result["language"] == "Python"
    assert result["verdict"] == "Vulnerable"
    assert result["vulnerabilities_found"] >= 2
    assert any("eval()" in vuln for vuln in result["vulnerabilities"])


def test_scan_python_code_secure():
    """Test Python code scanner with secure code."""
    code = """
    import hashlib
    def hash_password(password):
        salt = os.urandom(32)
        return hashlib.pbkdf2_hmac('sha256', password.encode(), salt, 100000)
    """

    result = scan_python_code(code)

    assert result["language"] == "Python"
    assert result["verdict"] == "Secure"
    assert result["vulnerabilities_found"] == 0


def test_scan_c_code_vulnerable():
    """Test C code scanner with vulnerable code."""
    code = """
    void read_input() {
        char buffer[100];
        gets(buffer);
        strcpy(buffer, user_input);
        system(buffer);
    }
    """

    result = scan_c_code(code)

    assert result["language"] == "C/C++"
    assert result["verdict"] == "Vulnerable"
    assert result["vulnerabilities_found"] >= 3
    assert any("gets()" in vuln for vuln in result["vulnerabilities"])


def test_scan_c_code_secure():
    """Test C code scanner with secure code."""
    code = """
    void safe_copy(char *dest, char *src, size_t size) {
        strncpy(dest, src, size - 1);
        dest[size - 1] = '\\0';
    }
    """

    result = scan_c_code(code)

    assert result["language"] == "C/C++"
    assert result["verdict"] == "Secure"
    assert result["vulnerabilities_found"] == 0


def test_reward_vulnerability_detection():
    """Test vulnerability detection reward function."""
    # Correct detection with tools
    completion = "Vulnerable: eval() allows code injection. Fix: use ast.literal_eval"
    answer = "Vulnerable: eval() allows arbitrary code execution"
    tools_used = ["scan_python_code"]

    reward = reward_vulnerability_detection(completion, answer, tools_used)
    assert reward > 0.7  # Should get high reward

    # Correct secure assessment
    completion = "Code is secure, no vulnerabilities found"
    answer = "Secure"

    reward = reward_vulnerability_detection(completion, answer)
    assert reward > 0.0


def test_load_environment():
    """Test loading the code vulnerability environment."""
    env = load_environment(max_examples=5)

    assert isinstance(env, vf.ToolEnv)
    assert env.dataset is not None
    assert len(env.dataset) == 5
    assert env.tools is not None
    assert len(env.tools) == 2  # Python and C scanners
